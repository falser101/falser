import{_ as l,o as a,c as i,e as s}from"./app-d8877bab.js";const e={},d=s('<h1 id="类的加载器和类加载过程" tabindex="-1"><a class="header-anchor" href="#类的加载器和类加载过程" aria-hidden="true">#</a> 类的加载器和类加载过程</h1><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/09/kuangstudydfe58db2-ee75-464b-803f-6c36ca896938.png" alt="加载过程"></p><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</li><li>ClassLoader之负责Class文件的加载，至于它是否可以运行，则由Execution Engine决定</li><li>加载的类信息，<strong>存放于一块称为方法区的内存空间</strong>，除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</li></ul><h2 id="类加载器classloader角色" tabindex="-1"><a class="header-anchor" href="#类加载器classloader角色" aria-hidden="true">#</a> 类加载器ClassLoader角色</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/09/kuangstudy7de4ff2d-a01d-493d-ac60-c806184a9584.png" alt="类加载过程" title="类加载过程"></p><ol><li>class file存放在本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM中来根据这个文件实例化个一模一样的实例。</li><li>class file加载到JVM中，被称为DNA元数据模板，放在方法区</li><li>在.class文件-&gt; JVM-&gt; 最终成为元数据模板，这个过程需要一个运输工具（类装载器 Class Loader），扮演一个快递员的角色。</li></ol><h2 id="类的加载过程" tabindex="-1"><a class="header-anchor" href="#类的加载过程" aria-hidden="true">#</a> 类的加载过程</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/09/kuangstudy7cae202d-8776-4a6e-9a07-01c898474869.png" alt="加载" title="加载"></p><ol><li><p>加载：</p><ul><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li><li>加载.class文件的方式有 <ul><li>本地系统</li><li>jar包</li><li>运行时计算生成，使用最多的是：动态代理</li><li>其他文件生成：jsp</li><li>......</li></ul></li></ul></li><li><p>链接（Linking)：</p><ul><li>验证： <ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li><li>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证（CA FE BA BE）</li></ul></li><li>准备： <ul><li>为类变量分配内存并且设置该类变量的默认初始值，即零值</li><li><strong>这里不包含用final修饰的static，因为final在编译的时候就会分配，准备阶段会显式初始化</strong></li><li>不会为实力变量分配初始化，类变量会分配在方法区中，而<strong>实例变量是会随着对象一起分配到Java堆中</strong>。</li></ul></li><li>解析： <ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li><li>符号引用就是一组符号来描述所引用的目标，符号引用的字面量形式明确定义在Class文件格式中。直接引用就是<strong>直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄</strong></li><li>解析动作主要针对<strong>类或接口，字段，类方法，接口方法，方法类型</strong>等。对应常量池中的CONSTANT_Class_info，CONSTANT_Fieldref_info，CONSTANT_Methodref_info等。</li></ul></li></ul></li><li><p>初始化：</p><ul><li>初始化阶段就是执行<strong>类构造器</strong>方法<code>&lt;clinit&gt;()</code>的过程</li><li>此方法不需要定义，是javac编译器自动收集类中的所有<strong>类变量的赋值动作和静态代码块中的语句合并而来。</strong>（无静态变量和静态方法，静态代码块等就不会执行<code>&lt;clinit&gt;()</code>）</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li><code>&lt;clinit&gt;()</code>不同于类的构造器。（关联：构造器是虚拟机视角下的<code>&lt;init&gt;()</code>）</li><li>若该类有父类，JVM会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;</code>()已经执行完毕</li><li>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁(保证只加载一次)</li></ul></li></ol><h2 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类" aria-hidden="true">#</a> 类加载器的分类</h2><ul><li>JVM支持两种类型的类加载器，分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）</li><li>从概念上来讲，自定义类加载器一般指的是程序中有开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器</strong>。</li><li>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示： <img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/11/kuangstudy9957b99b-9565-4adc-af49-5e4d145e56d9.png" alt="分类" title="分类"> 这里四者的关系是包含关系，不是上下级关系，也不是父子继承关系。</li></ul><h3 id="虚拟机自带的加载器" tabindex="-1"><a class="header-anchor" href="#虚拟机自带的加载器" aria-hidden="true">#</a> 虚拟机自带的加载器</h3><ul><li>启动类加载器（引导类加载器，Bootstrap classLoader) <ul><li>这个类加载使用c/C++语言实现的，嵌套在JVM内部。</li><li>它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun. boot.class.path路径下的内容），用于提供JVM自身需要的类</li><li>并不继承自<code>java.lang.classLoader</code>，没有父加载器。加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为<code>java、javax、su</code>n等开头的类</li></ul></li></ul><h3 id="用户自定义的类加载器" tabindex="-1"><a class="header-anchor" href="#用户自定义的类加载器" aria-hidden="true">#</a> 用户自定义的类加载器</h3><ul><li>为什么要自定义类加载器? <ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄漏</li></ul></li><li>用户自定义类加载器实现步骤： <ul><li>开发人员可以通过继承抽象类<code>java.lang.classLoader</code>类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在JDK1.2之前，在自定义类加载器时，总会去继承classLoader类并重写<code>loadclass()</code>方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖<code>loadclass()</code> 方法，而是建议把自定义的类加载逻辑写在<code>findclass()</code>方法中</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承<code>URLClassLoader</code>类，这样就可以避免自己去编写<code>findclass()</code>方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li></ul></li></ul><h3 id="获取classloader的途径" tabindex="-1"><a class="header-anchor" href="#获取classloader的途径" aria-hidden="true">#</a> 获取ClassLoader的途径</h3><ul><li>方式一：获取当前类的ClassLoader <code>class.getClassLoader()</code></li><li>方式二：获取当前线程上下文的ClassLoader <code>Thread。currentThread().getContextClassLoader()</code></li><li>方式三：获取系统的ClassLoader <code>ClassLoader.getSystemClassLoader()</code></li><li>方式四：获取调用者的ClassLoader <code>DriverManager.getCallerClassLoader()</code></li></ul><h2 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制" aria-hidden="true">#</a> 双亲委派机制</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/11/kuangstudy0204b515-c4e8-4812-8aca-35068f50d6de.png" alt="工作原理" title="工作原理"><strong>工作原理</strong></p><ol><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行;</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归,请求最终将到达顶层的启动类加载器;</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li></ol><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/11/kuangstudy5445fd63-48ac-4e1c-950d-c92ceb419dd7.png" alt="示例" title="示例"><strong>优势</strong></p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改 <ul><li>自定义类: java.lang.string</li><li>自定义类: java.lang.shkstart</li><li>抛出异常: <code>java.lang.securityException:Prohibited package name: java.lang </code></li></ul></li></ul><h2 id="沙箱安全机制" tabindex="-1"><a class="header-anchor" href="#沙箱安全机制" aria-hidden="true">#</a> 沙箱安全机制</h2><p>自定义String类，但是在加载自定义string类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件(rt.jar包中<code>java\\lang\\String.class</code>) ，报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是<strong>沙箱安全机制</strong>。</p><p>在JVM中表示两个class对象是否为同一个类存在<strong>两个必要条件</strong>:</p><ul><li>类的完整类名必须一致，包括包名。</li><li>加载这个类的classLoader(指classLoader实例对象)必须相同。</li></ul><p>换句话说，在JVM中，即使这两个类对象(class对象)来源同一个class文件，被同一个虚拟机所加载，但只要加载它们的classLoader实例对象不同，那么这两个类对象也是不相等的。</p>',27),t=[d];function o(c,r){return a(),i("div",null,t)}const g=l(e,[["render",o],["__file","01.leijiazaizixitong.html.vue"]]);export{g as default};
