const e=JSON.parse('{"key":"v-765ba898","path":"/posts/java/2021/04.%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.html","title":"虚拟机栈","lang":"zh-CN","frontmatter":{"title":"虚拟机栈","date":"2021-02-12T00:00:00.000Z","category":["java"],"tag":["jvm"],"description":"虚拟机栈概述 虚拟机栈概述 虚拟机出现的背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点：跨平台，指令集小，编译器容易实现 缺点：性能下降，实现同样的功能需要更多的指令。 基本内容 Java虚拟机栈是什么? Java虚拟机栈(Java Virtual Machine Stack) ，早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame) ，对应着一次次的Java方法调用。 是线程私有的 生命周期： 生命周期和线程一致。 作用： 主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。","head":[["meta",{"property":"og:url","content":"https://falser101.github.io/falser/posts/java/2021/04.%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.html"}],["meta",{"property":"og:site_name","content":"飞哥与小佛"}],["meta",{"property":"og:title","content":"虚拟机栈"}],["meta",{"property":"og:description","content":"虚拟机栈概述 虚拟机栈概述 虚拟机出现的背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点：跨平台，指令集小，编译器容易实现 缺点：性能下降，实现同样的功能需要更多的指令。 基本内容 Java虚拟机栈是什么? Java虚拟机栈(Java Virtual Machine Stack) ，早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame) ，对应着一次次的Java方法调用。 是线程私有的 生命周期： 生命周期和线程一致。 作用： 主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T06:14:41.000Z"}],["meta",{"property":"article:author","content":"falser"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:published_time","content":"2021-02-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-22T06:14:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚拟机栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-22T06:14:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"falser\\",\\"url\\":\\"https://github.com/falser101\\"}]}"]]},"headers":[{"level":2,"title":"虚拟机出现的背景","slug":"虚拟机出现的背景","link":"#虚拟机出现的背景","children":[]},{"level":2,"title":"基本内容","slug":"基本内容","link":"#基本内容","children":[]},{"level":2,"title":"栈中可能出现的异常","slug":"栈中可能出现的异常","link":"#栈中可能出现的异常","children":[]},{"level":2,"title":"栈是运行时的单位，而堆是存储的单位。","slug":"栈是运行时的单位-而堆是存储的单位。","link":"#栈是运行时的单位-而堆是存储的单位。","children":[]},{"level":2,"title":"设置虚拟机栈的大小","slug":"设置虚拟机栈的大小","link":"#设置虚拟机栈的大小","children":[]},{"level":2,"title":"栈中存储什么？","slug":"栈中存储什么","link":"#栈中存储什么","children":[]},{"level":2,"title":"栈运行原理","slug":"栈运行原理","link":"#栈运行原理","children":[]},{"level":2,"title":"Slot","slug":"slot","link":"#slot","children":[]},{"level":2,"title":"补充","slug":"补充","link":"#补充","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"虚方法和非虚方法","slug":"虚方法和非虚方法","link":"#虚方法和非虚方法","children":[]},{"level":2,"title":"虚方法表","slug":"虚方法表","link":"#虚方法表","children":[]}],"git":{"createdTime":1700633681000,"updatedTime":1700633681000,"contributors":[{"name":"T2816","email":"zhangjf@tongtech.com","commits":1}]},"readingTime":{"minutes":14.78,"words":4434},"filePathRelative":"posts/java/2021/04.虚拟机栈.md","localizedDate":"2021年2月12日","excerpt":"<blockquote>\\n<p>虚拟机栈概述</p>\\n</blockquote>\\n<h1> 虚拟机栈概述</h1>\\n<h2> 虚拟机出现的背景</h2>\\n<p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。\\n优点：跨平台，指令集小，编译器容易实现\\n缺点：性能下降，实现同样的功能需要更多的指令。</p>\\n<h2> 基本内容</h2>\\n<ul>\\n<li>Java虚拟机栈是什么?\\n<ul>\\n<li>Java虚拟机栈(Java Virtual Machine Stack) ，早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame) ，对应着一次次的Java方法调用。</li>\\n<li>是线程私有的</li>\\n</ul>\\n</li>\\n<li>生命周期：\\n<ul>\\n<li>生命周期和线程一致。</li>\\n</ul>\\n</li>\\n<li>作用：\\n<ul>\\n<li>主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
