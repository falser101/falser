import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as n,c as t,a as i,b as e,e as s,f as l}from"./app-7hJDOXrF.js";const g={},d=l('<h1 id="_1-堆的核心概述" tabindex="-1"><a class="header-anchor" href="#_1-堆的核心概述" aria-hidden="true">#</a> 1. 堆的核心概述</h1><ul><li><p>一个JVM实例<strong>只存在一个堆内存</strong>，堆也是Java内存管理的核心区域。</p></li><li><p>Java 堆区在<strong>JVM启动的时候即被创建</strong>，其<strong>空间大小也就确定了</strong>。是JVM管理的最大一块内存空间。</p><ul><li>堆内存的大小是可以调节的。</li></ul></li><li><p>《Java虚拟机规范》规定，堆<strong>可以处于物理上不连续</strong>的内存空间中，但在<strong>逻辑上它应该被视为连续</strong>的。</p></li><li><p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区(Thread Local Allocation Buffer, TLAB) 。</p></li><li><p>《Java虛拟机规范》中对Java堆的描述是:所有的对象实例以及数组都应当在运行时分配在堆上。(The heap is the run-time data area from which memory for all cla3s instances and arrays is allocated )</p><ul><li>我要说的是: “几乎”所有的对象实例都在这里分配内存。一从实际使用角度看的。</li></ul></li><li><p><strong>数组和对象可能永远不会存储在栈上</strong>，因为<strong>栈帧中保存引用</strong>，这个<strong>引用指向对象或者数组在堆中的位置</strong>。</p></li><li><p>在方法结束后，堆中的对象<strong>不会马上被移除</strong>，仅仅在<strong>垃圾收集的时候才会被移除</strong>。</p></li><li><p>堆，是GC ( Garbage Collection， 垃圾收集器**)执行垃圾回收的重点区域**。</p></li></ul><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/20/kuangstudyd0a0ae7b-7b7f-4b8a-8d47-e9cb6fd6cf5e.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="内存细分" tabindex="-1"><a class="header-anchor" href="#内存细分" aria-hidden="true">#</a> 内存细分</h2><p>现代垃圾收集器大部分都基于分代收集理论设计,堆空间细分为:</p><ul><li><p><strong>Java 7</strong>及之前堆内存逻辑上分为三部分:新生区+老年区+<strong>永久区</strong></p><ul><li>Young Generation Space <strong>新生区</strong> Young/New <ul><li>又被划分为Eden区和Survivor区</li></ul></li><li>Tenure generation space <strong>老年区</strong> Old/ Tenure</li><li>Permanent Space <strong>永久区</strong> Perm</li></ul></li><li><p><strong>Java 8</strong>及之后堆内存逻辑上分为三部分:新生区+老年区+<strong>元空间</strong></p><ul><li>Young Generation Space <strong>新生区</strong> Young/New <ul><li>又被划分为Eden区和Survivor区</li></ul></li><li>Tenure generation space <strong>老年区</strong> Old/ Tenure</li><li>Meta Space <strong>元空间</strong> Meta</li></ul></li></ul><h1 id="_2-设置堆内存大小与oom" tabindex="-1"><a class="header-anchor" href="#_2-设置堆内存大小与oom" aria-hidden="true">#</a> 2. 设置堆内存大小与OOM</h1><p><strong>-XX:+PrintGCDetails</strong>：打印GC详情 <strong>jps</strong>：查看java进程 <strong>jstat -gc java进程号</strong>：查看内存使用情况</p><ul><li>Java堆区用于存 储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot; -Xmx&quot;和”-xms&quot;来进行设置。 <ul><li>-Xms用来设置堆空间(年轻代+老年代)的<strong>初始</strong>内存大小， 等价于-XX: InitialHeapSize <ul><li>-X是jvm的运行参数</li><li>ms是memory start</li></ul></li><li>-Xmx用来设置堆空间(年轻代+老年代)的<strong>最大</strong>内存大小， 等价于-XX: MaxHeapSize :</li></ul></li><li>一旦堆区中的内存大小<strong>超过&quot;-Xmx&quot;所指定的最大内存</strong>时，将会抛出OutOfMemoryError异常。</li><li>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是为了<strong>能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</li><li>默认情况下，初始内存大小:物理电脑内存大小/ 64 最大内存大小:物理电脑内存大小/ 4</li></ul><h1 id="_3-年轻代与老年代" tabindex="-1"><a class="header-anchor" href="#_3-年轻代与老年代" aria-hidden="true">#</a> 3. 年轻代与老年代</h1><h2 id="存储在jvm中的java对象可以被划分为两类" tabindex="-1"><a class="header-anchor" href="#存储在jvm中的java对象可以被划分为两类" aria-hidden="true">#</a> 存储在JVM中的Java对象可以被划分为两类：</h2><ul><li>一类是生命周期较短的<strong>瞬时对象</strong>，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致。</li><li>Java堆区进一步细分的话，可以划分为<strong>年轻代（YoungGen）<strong>和</strong>老年代（OldGen）</strong></li><li>其中年轻代又可以划分为<strong>Eden空间</strong>、<strong>Survivor0空间</strong>和<strong>survivor1</strong>空间（有时也叫做<strong>from</strong>区、<strong>to</strong>区） <img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/21/kuangstudycc240f6d-cfdb-439b-b9c3-e58b6ae94b22.png" alt="分类" title="分类" loading="lazy"></li></ul><h2 id="配置新生代与老年代在堆结构的占比-默认1-2-。" tabindex="-1"><a class="header-anchor" href="#配置新生代与老年代在堆结构的占比-默认1-2-。" aria-hidden="true">#</a> 配置新生代与老年代在堆结构的占比(默认1:2)。</h2><ul><li>默认**-XX: NewRatio=2**,表示新生代占1,**老年代占2,**新生代占整个堆的1/3</li><li>可以修改**-XX: NewRatio=4**,表示新生代占1,**老年代占4,**新生代占整个堆的1/5</li><li>-XX:-UseAdaptivesizepoli 关闭自适应的内存分配策略</li><li>在 Hotspot中,Eden空间和另外两个 Survivor空间缺省所占的比例是<strong>8:1:1</strong></li><li>当然开发人员可以通过选项“-xx: Survivorratio”调整这个空间比例。XX: SurvivorRatio=8</li><li><strong>几乎所有</strong>的Java对象都是在Eden区被new出来的</li><li>绝大部分的Java对象的销毁都在新生代进行了 <ul><li>IBM公司的专门研究表明,新生代中80%的对象都是“朝生夕死”的</li></ul></li><li>可以使用选项**&quot;-Xmn&quot;**设置新生代最大内存大小 <ul><li>这个参数一般使用默认值就可以了</li></ul></li></ul><h1 id="_4-图解对象分配过程" tabindex="-1"><a class="header-anchor" href="#_4-图解对象分配过程" aria-hidden="true">#</a> 4. 图解对象分配过程</h1><p>为新对象分配内存是一件非 常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p><ol><li>new的对象先放伊甸园区。此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li><li>然后将伊甸园中的剩余对象移动到幸存者0区。</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li><li>啥时候能去养老区呢?可以设置次数。<strong>默认是15次</strong>。 <ul><li>可以设置参数: -XX:MaxTenuringThreshold=N 进行设置。</li></ul></li></ol><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/21/kuangstudye3b7910c-e18c-49ba-bcdd-478ca9ca0443.jpg" alt="YoungGC" tabindex="0" loading="lazy"><figcaption>YoungGC</figcaption></figure><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/21/kuangstudyb93e7286-be5d-4a92-bfde-77afb996c50b.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/21/kuangstudy172aa1a4-c9cb-474d-97f4-7129e21a8715.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结:</h2><ul><li>针对幸存者s0,s1区的总结：<strong>复制之后有交换</strong>，<strong>谁空谁是to</strong></li><li>关于垃圾回收：<strong>频繁</strong>在新生区收集，<strong>很少</strong>在养老区收集，<strong>几乎不在</strong>永久区/元空间收集。</li></ul><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/21/kuangstudyece44ede-069a-4e5a-ab05-3571642756d8.jpg" alt="分配流程图" tabindex="0" loading="lazy"><figcaption>分配流程图</figcaption></figure><h1 id="_5-minor-gc、major-gc、full-gc" tabindex="-1"><a class="header-anchor" href="#_5-minor-gc、major-gc、full-gc" aria-hidden="true">#</a> 5. Minor GC、Major GC、Full GC</h1><p>JVM在进行GC时，并非每次都对上面三个内存(新生代、老年代;方法区)区域一起回收的，<strong>大部分时候回收的都是指新生代</strong>。 针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型:一 种是部分收集(Partial GC)，一种是整堆收集(Full GC)</p><ol><li>部分收集:不是完整收集整个Java堆的垃圾收集。其中又分为: <ul><li>新生代收集(<strong>Minor GC</strong> / Young GC) :只是新生代(Eden\\Se,S1)的垃圾收集</li><li>老年代收集(<strong>MajorGC</strong>/ OldGC):只是老年代的垃圾收集。 <ul><li>目前，只有<strong>CMS GC</strong>会有<strong>单独收集老年代</strong>的行为。.</li><li>注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li></ul></li></ul></li><li>混合收集(Mixed GC): <strong>收集整个新生代以及部分老年代</strong>的垃圾收集。 <ul><li>目前，只有<strong>G1 GC</strong>会有这种行为</li></ul></li><li>整堆收集(Fu11 GC):<strong>收集整个java堆和方法区</strong>的垃圾收集。</li></ol><h2 id="最简单的分代式gc策略的触发条件" tabindex="-1"><a class="header-anchor" href="#最简单的分代式gc策略的触发条件" aria-hidden="true">#</a> 最简单的分代式GC策略的触发条件</h2><p><strong>年轻代GC(Minor GC)触发机制</strong>:</p><ul><li>当年轻代空间不足时， 就会触发Minor GC，这里的年轻代满指的是Eden区满，Survivor满不会引发GC（<strong>要么晋升，要么等待下一次Eden满进行GC</strong>）。(每次 Minor GC会清理年轻代的内存。)</li><li>因为<strong>Java对象大多都具备朝生夕灭</strong>的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</li><li>Minor GC会引发STW， 暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。</li></ul><p>threshold = 阈值默认为15 <img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/22/kuangstudy2c1c8b3a-76c4-48f7-8957-38aa2539794c.jpg" alt="分代GC" title="分代GC" loading="lazy"></p><p><strong>老年代GC (Major GC/Fu11 GC)触发机制</strong>:</p><ul><li>指发生在老年代的GC，对象从老年代消失时，我们说“Major GC”或“Fu1l GC”发生了。</li><li>出现了Major GC，经常会伴随至少一次的Minor GC (但非绝对的，在ParallelScavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程) <ul><li>也就是在老年代空间不足时，会先尝试触发Minor GC。如果之后空间还不足，则触发Major GC</li></ul></li><li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长。</li><li>如果Major GC后，内存还不足，就报OOM了。</li></ul><p><strong>Full GC触发机制</strong>: 触发Full GC执行的情况有如下五种:</p><ol><li>调用System. gc()时，系统建议执行Fu11 GC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足，</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor space日(From Space) 区向survivor space1 (To Space)区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小. 说明: full gc是开发或调优中尽量要避免的。这样暂停时间会短一些。</li></ol><h1 id="_6-堆空间分代思想" tabindex="-1"><a class="header-anchor" href="#_6-堆空间分代思想" aria-hidden="true">#</a> 6. 堆空间分代思想</h1><p><strong>为什么需要把Java堆分代?不分代就不能正常工作了吗?</strong> 其实不分代完全可以，分代的唯一理由就是<strong>优化Gc性能</strong>。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。 <img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/22/kuangstudy3c4bdf7a-7a96-4d36-95ff-860c260a4ea6.jpg" alt="分代思想" title="分代思想" loading="lazy"></p><h1 id="_7-内存分配策略" tabindex="-1"><a class="header-anchor" href="#_7-内存分配策略" aria-hidden="true">#</a> 7. 内存分配策略</h1><p>如果对象在Eden出生并经过第一次MinorGC 后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对 象年龄设为1。对象在Survivor区中每熬过一次MinorGC，年龄就增加1岁， 当它的年龄增加到一定程度(默认为15岁，其实每个JVM、每个GC都有所不同)时，就会被晋升到老年代中。 对象晋升老年代的年龄阈值，可以通过选项<code>-XX:MaxTenuringThreshold</code>来设置。</p><p>针对不同年龄段的对象分配原则如下所示:</p><ul><li>优先分配到Eden</li><li>大对象直接分配到老年代 <ul><li><strong>尽量避免程序中出现过多的大对象</strong></li></ul></li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断 <ul><li>如果Survivor 区中<strong>相同年龄的所有对象大小的总和大于Survivor空间的一半</strong>，<strong>年龄大于或等于该年龄的对象</strong>可以直接进入老年代，无须等到MaxTenuri ngThreshold中要求的年龄。</li></ul></li><li>空间分配担保（Eden和幸存者区放不下直接放到老年区） <ul><li>-XX: HandlePromotionFailure</li></ul></li></ul><h1 id="_8-为对象分配内存-tlab" tabindex="-1"><a class="header-anchor" href="#_8-为对象分配内存-tlab" aria-hidden="true">#</a> 8. 为对象分配内存: TLAB</h1><p>为什么有TLAB ( Thread Local Allocation Buffer ) ?</p><ul><li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是<strong>线程不安全的</strong></li><li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</li></ul><p>什么是TLAB ?</p><ul><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，<strong>JVM为每个线程分配了一个私有缓存区域</strong>，它包含在Eden空间内。</li><li>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong>。</li><li>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</li></ul><p>TLAB再说明</p><ul><li>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但<strong>JVM确实是将TLAB作为内存分配的首选</strong>。</li><li>在程序中，开发人员可以通过选项<code>-XX:TLAB</code>设置是否开启TLAB空间。</li><li>默认情况下，TLAB空间的内存非常小，<strong>仅占有整个Eden空间的1%</strong>，当然我们可以通过选项<code>-XX:TLABWasteTargetPercent </code>设置TLAB空间所占用Eden空间的百分比大小。</li><li>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用<strong>加锁机制</strong>确保数据操作的原子性，从而直接在Eden空间中分配内存。</li></ul><figure><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/02/23/kuangstudy92888cec-6b81-43fb-85ee-00385a7f4c1a.jpg" alt="分配过程" tabindex="0" loading="lazy"><figcaption>分配过程</figcaption></figure><h1 id="_9-小结堆空间的参数设置" tabindex="-1"><a class="header-anchor" href="#_9-小结堆空间的参数设置" aria-hidden="true">#</a> 9. 小结堆空间的参数设置</h1>',49),c={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html",title:"Oracle官网",target:"_blank",rel:"noopener noreferrer"},u=l('<ul><li><code>-XX:+PrintFlagsInitial</code> :查看所有的参数的默认初始值</li><li><code>-XX:+PrintFlagsFinal</code>:查看所有的参数的最终值(可能会存在修改,不再是初始值) <ul><li>具体查看某个参数的指令: <code>jps</code>: 查看当前运行中的进程 <code>jinfo -flag 参数名 进程id</code></li></ul></li><li><code>-Xms:初始堆空间内存</code>( 默认为物理内存的1/64)</li><li><code>-Xmx:最大堆空间内存</code>(默认为物理内存的1/4)</li><li><code>-Xmn:设置新生代的大小</code>。(初始值及最大值)</li><li><code>-XX:NewRatio</code>：配置新生代与老年代在堆结构的占比</li><li><code>-XX:SurvivorRatio</code>:设置新生代中Eden和sO/S1空间的比例</li><li><code>-XX:MaxTenuringThreshold</code>:设置新生代垃圾的最大年龄</li><li><code>-XX:+PrintGCDetails</code>:输出详细的GC处理日志</li><li>打印gc简要信息:1.<code>-XX:+PrintGC</code> 2.<code>-verbose:gc</code></li><li><code>-XX:HandlePromotionFailure</code>:是否设置空间分配担保</li></ul><h1 id="_10-堆是分配对象的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#_10-堆是分配对象的唯一选择吗" aria-hidden="true">#</a> 10 堆是分配对象的唯一选择吗</h1><p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述:随着JIT编译期的发展与逃逸分析技术逐渐成熟，<strong>栈上分配</strong>、<strong>标量替换优化技术</strong>将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p><p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<strong>如果经过逃逸分析(Escape Analysis) 后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</strong>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><p>此外，前面提到的基于openJDK深度定制的TaoBaoVM，其中创新的GCIH (GCinvisible heap) 技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p><ul><li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li><li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li><li>逃逸分析的基本行为就是分析对象动态作用域: <ul><li>当一个对象在方法中被定义后，<strong>对象只在方法内部使用</strong>，则认为<strong>没有发生逃逸</strong>。</li><li>当一个对象在方法中被定义后，它<strong>被外部方法所引用</strong>，则认为<strong>发生逃逸</strong>。例如作为调用参数传递到其他地方中。</li></ul></li></ul><p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除。</p><p>**结论:**开发中能使用局部变量的，就不要使用在方法外定义。</p><h1 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化" aria-hidden="true">#</a> 代码优化</h1><h2 id="同步省略" tabindex="-1"><a class="header-anchor" href="#同步省略" aria-hidden="true">#</a> 同步省略</h2><ol><li>线程同步的代价是相当高的，同步的后果是降低并发性和性能。在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所</li><li>使用的锁对象<strong>是否只能够被一个线程访问而没有被发布到其他线程</strong>。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫<strong>同步省略</strong>，也叫<strong>锁消除</strong>。</li></ol><h2 id="标量替换" tabindex="-1"><a class="header-anchor" href="#标量替换" aria-hidden="true">#</a> 标量替换</h2><ol><li><strong>标量</strong>(Scalar)是指一个<strong>无法再分解成更小的数据</strong>的数据。Java中的原始数据类型就是标量</li><li>相对的，那些还<strong>可以分解</strong>的数据叫做<strong>聚合量</strong>(Aggregate) ，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</li><li>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是<strong>标量替换</strong>。</li><li>标量替换参数设置: <ul><li>参数<code>-XX: +EliminateAllocations</code>:开启了标量替换(默认打开)，允许将对象打散分配在栈上</li></ul></li></ol><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><ol><li>年轻代是对象的诞生、成长、消亡的区域，-一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</li><li>老年代放置长生命周期的对象，通常都是从Survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB_上;如果对象较大，JVM会试图直接分配在Eden其他位置上;如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。</li><li>当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGC。当GC发生在老年代时则被称为MajorGC或者Ful1GC。- .般的，MinorGC 的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</li></ol>',15);function h(p,f){const a=r("ExternalLinkIcon");return n(),t("div",null,[d,i("p",null,[i("a",c,[e("Oracle官网"),s(a)])]),u])}const v=o(g,[["render",h],["__file","06.运行时数据区——堆.html.vue"]]);export{v as default};
