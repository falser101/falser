const e=JSON.parse('{"key":"v-5bd381ee","path":"/posts/java/2022/01.JAVA%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","title":"JAVA中的代理模式","lang":"zh-CN","frontmatter":{"title":"JAVA中的代理模式","author":"falser101","date":"2023-01-09T00:00:00.000Z","category":["java"],"tag":["设计模式"],"description":"代理模式 静态代理 在Java中手动实现代理模式非常简单，定义一个接口，一个实现类和一个持有实现类的代理类，下面以短信发送为例 短信发送接口 package proxy; public interface SmsService { void send(String str); }","head":[["meta",{"property":"og:url","content":"https://falser101.github.io/falser/posts/java/2022/01.JAVA%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"飞哥与小佛"}],["meta",{"property":"og:title","content":"JAVA中的代理模式"}],["meta",{"property":"og:description","content":"代理模式 静态代理 在Java中手动实现代理模式非常简单，定义一个接口，一个实现类和一个持有实现类的代理类，下面以短信发送为例 短信发送接口 package proxy; public interface SmsService { void send(String str); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T06:14:41.000Z"}],["meta",{"property":"article:author","content":"falser101"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-22T06:14:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAVA中的代理模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-22T06:14:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"falser101\\"}]}"]]},"headers":[{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[{"level":3,"title":"JDK动态代理","slug":"jdk动态代理","link":"#jdk动态代理","children":[]},{"level":3,"title":"CGLIB动态代理","slug":"cglib动态代理","link":"#cglib动态代理","children":[]}]},{"level":2,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]}],"git":{"createdTime":1700633681000,"updatedTime":1700633681000,"contributors":[{"name":"T2816","email":"zhangjf@tongtech.com","commits":1}]},"readingTime":{"minutes":3.47,"words":1041},"filePathRelative":"posts/java/2022/01.JAVA中的代理模式.md","localizedDate":"2023年1月9日","excerpt":"<blockquote>\\n<p>代理模式</p>\\n</blockquote>\\n<h2> 静态代理</h2>\\n<p>在Java中手动实现代理模式非常简单，定义一个接口，一个实现类和一个持有实现类的代理类，下面以短信发送为例</p>\\n<p>短信发送接口</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">proxy</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">SmsService</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
